{"version":3,"sources":["components/index_styles.ts","components/Cell.tsx","components/Grid.tsx","components/Score.tsx","components/SolverCell.tsx","components/BoardGame.tsx","redux/app.ts","index.tsx"],"names":["useStyles","makeStyles","theme","cellSize","baseCellStyles","height","width","display","justifyContent","alignItems","createStyles","root","maxWidth","margin","grid","gridTemplateColumns","nbCell","gridTemplateRows","gridGap","score","cell","background","color","cursor","solverCell","bestSolution","container","vScores","highScores","marginLeft","header","Cell","props","classes","className","visible","value","dispatch","useDispatch","useSelector","selectScore","valueToDisplay","clsx","onClick","cellClick","alert","updateGrid","handleClick","Grid","helpMode","Math","max","map","row","r","c","every","filter","undefined","Score","SolverCell","children","getScoreFromRow","sum","reduce","acc","nbZeros","BoardGame","matrix","React","useState","setHelpMode","selectGrid","hScores","col","i","scores","selectScores","Button","variant","FormGroup","FormControlLabel","control","Switch","checked","onChange","prevState","label","Table","TableHead","TableRow","TableCell","TableBody","sort","a","b","slice","index","generateNewGrid","newGrid","Array","e","start","end","floor","random","id","arr","initialState","createSlice","name","reducers","state","action","payload","concat","min","rootReducer","reducer","appStore","configureStore","actions","ReactDOM","render","store","StrictMode","document","getElementById"],"mappings":"4OAGaA,EAAYC,aAAW,SAACC,GAEjC,IAAMC,EAAW,OAGXC,EAAiB,CACnBC,OAAQF,EACRG,MAAOH,EACPI,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAGhB,OAAOC,YAAa,CAChBC,KAAM,CACFC,SAAU,KACV,MAAO,CACHC,OAAQ,KAGhBC,KAAM,CACFP,QAAS,OACTQ,oBAAoB,UAAD,OAAYC,EAAZ,aAAuBb,EAAvB,KACnBc,iBAAiB,UAAD,OAAYD,EAAZ,aAAuBb,EAAvB,KAChBe,QArBQ,IAuBZC,MAAO,CACHZ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAEhBW,KAAK,2BACEhB,GADH,IAEAiB,WAAY,QACZC,MAAO,QACPC,OAAQ,YAEZC,WAAW,2BACJpB,GADG,IAENiB,WAAY,OACZC,MAAO,UAEXG,aAAc,CACVJ,WAAY,UAEhBK,UAAW,CACPnB,QAAS,OACT,MAAO,CACHM,OAAO,KAAD,OAAOK,EAAP,QAGdS,QAAS,CACL,wBAAyB,CACrBd,OAAO,GAAD,OAlDF,GAkDE,UAGde,WAAY,CACRC,WAAY,IAEhBC,OAAQ,CACJvB,QAAS,OACT,MAAO,CACHsB,WAAY,U,cCzBbE,EA5BgE,SAACC,GAE5E,IAAMC,EAAUjC,IAERoB,EAAoBY,EAApBZ,KAAMc,EAAcF,EAAdE,UACNC,EAAmBf,EAAnBe,QAASC,EAAUhB,EAAVgB,MAEXC,EAAWC,cAEXnB,EAAQoB,YAAYC,GAUpBC,EAA2B,IAAVL,EAAc,eAAOA,EAE5C,OACI,qBAAKF,UAAWQ,YAAKT,EAAQb,KAAMc,GAAYS,QAAS,kBAAOR,GAX/C,SAACf,GACjBiB,EAASO,EAAU,CAAExB,UACP,IAAVgB,IACAS,MAAM,6BACNR,EAASS,EAAW,CAAE3B,YAOgD4B,CAAY3B,IAAtF,SACKe,GAAWM,KCHTO,EA3BmE,SAAChB,GAE/E,IAAMC,EAAUjC,IAERc,EAAmBkB,EAAnBlB,KAAMmC,EAAajB,EAAbiB,SAEVxB,EAAeyB,KAAKC,IAAL,MAAAD,KAAI,YAAQpC,EAAKsC,KAAI,SAAAC,GAAG,OAAIH,KAAKC,IAAL,MAAAD,KAAI,YAAQG,EAAID,KAAI,SAAAhC,GAAI,OAAIA,EAAKgB,gBAUhF,OACI,qBAAKF,UAAWD,EAAQnB,KAAxB,SACKA,EAAKsC,KAAI,SAACC,EAAKC,GAAN,OACND,EAAID,KAAI,SAAChC,EAAMmC,GAAP,OACJ,cAAC,EAAD,CAAMnC,KAAMA,EAAMc,UAAYe,GAAY7B,EAAKgB,SAX3BtB,EAAK0C,OAAM,SAAAH,GAAG,OAAIA,EAAII,QAAO,SAAArC,GAAI,OAAIA,EAAKgB,QAAUX,KAAc+B,OAAM,SAAApC,GAAI,OAAIA,EAAKe,gBAEjHV,GAA8B,GAE3BA,GAOmFQ,EAAQR,kBAAeiC,aCX1GC,EAX2C,SAAC3B,GAEvD,IAAMC,EAAUjC,IAEhB,OACI,qBAAKkC,UAAWD,EAAQd,MAAxB,0BACea,EAAMb,UCOdyC,EAZiC,SAAC5B,GAE7C,IAAMC,EAAUjC,IACR6D,EAAa7B,EAAb6B,SAER,OACI,qBAAK3B,UAAWD,EAAQT,WAAxB,SACKqC,K,wECDA7C,EAAS,EAQhB8C,EAAkB,SAACT,GACrB,IAAMU,EAAMV,EAAIW,QAAO,SAACC,EAAK7C,GAAN,OAAe6C,EAAM7C,EAAKgB,QAAO,GAClD8B,EAAUb,EAAIW,QAAO,SAACC,EAAK7C,GAAN,OAA8B,IAAfA,EAAKgB,MAAc6B,EAAM,EAAIA,IAAK,GAC5E,MAAM,GAAN,OAAUF,EAAV,cAAmBG,EAAnB,iBA6EWC,EA1EgC,SAACnC,GAE5C,IAZeoC,EAYTnC,EAAUjC,IAEVqC,EAAWC,cAJqC,EAMtB+B,IAAMC,UAAS,GANO,mBAM/CrB,EAN+C,KAMrCsB,EANqC,KAYhDzD,EAAOyB,YAAYiC,GAMnBC,EAAU3D,EAAKsC,KAAI,SAAAC,GAAG,OAAIS,EAAgBT,MAE1C1B,GA9BSyC,EA8BWtD,EA7BnBsD,EAAO,GAAGhB,KAAI,SAACsB,EAAKC,GAAN,OAAYP,EAAOhB,KAAI,SAAAC,GAAG,OAAIA,EAAIsB,UA6BvBvB,KAAI,SAAAC,GAAG,OAAIS,EAAgBT,MAErDlC,EAAQoB,YAAYC,GAEpBoC,EAASrC,YAAYsC,GAO3B,OALI1D,GAtCgB,KAuChB0B,MAAM,2BACNR,EAASS,EAAW,CAAE3B,YAItB,sBAAKe,UAAWD,EAAQtB,KAAxB,UACI,sBAAKuB,UAAWD,EAAQH,OAAxB,UACI,cAACgD,EAAA,EAAD,CAAQxD,MAAM,UAAUyD,QAAQ,YAAYpC,QApBlC,WAClBN,EAASS,EAAW,CAAE3B,YAmBd,SAAqE,aACrE,cAAC6D,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CACIC,QAAS,cAACC,EAAA,EAAD,CAAQC,QAASnC,EAAUoC,SA7BnC,WACjBd,GAAY,SAAAe,GAAS,OAAKA,MA4BkDhE,MAAM,YAClEiE,MAAM,mBAIlB,gCACI,sBAAKrD,UAAWD,EAAQP,UAAxB,UACI,cAAC,EAAD,CAAMZ,KAAMA,EAAMmC,SAAUA,IAC5B,qBAAKf,UAAWD,EAAQN,QAAxB,SAAkC8C,EAAQrB,KAAI,SAAAhC,GAAI,OAAI,cAAC,EAAD,UAAaA,SACnE,sBAAKc,UAAWD,EAAQL,WAAxB,UACI,6BAAK,oBACL,eAAC4D,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,UAAY,SACZ,cAACA,EAAA,EAAD,UAAY,eAGpB,cAACC,EAAA,EAAD,UACK,YAAIhB,GAAQiB,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAID,KAAGE,MAAM,EAAG,GAAG5C,KAAI,SAACjC,EAAO8E,GAAR,OAC/C,eAACP,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,UAAYM,EAAQ,IACpB,cAACN,EAAA,EAAD,UAAYxE,qBAOpC,qBAAKe,UAAWD,EAAQP,UAAxB,SAAoCC,EAAQyB,KAAI,SAAAhC,GAAI,OAAI,cAAC,EAAD,UAAaA,YAEzE,cAAC,EAAD,CAAOD,MAAOA,IACd,iDAjFY,GAiFZ,iBChFN+E,EAAkB,SAAlBA,IACF,IAAMC,EAAU,YAAI,IAAIC,MAAMpF,IAASoC,KAAI,SAACiD,EAAG/C,GAAJ,OACvC,YAAI,IAAI8C,MAAMpF,IAASoC,KAAI,SAACiD,EAAG9C,GAAJ,MAAW,CAAEnB,OAVxBkE,EAU8C,EAV/BC,EDMf,ECLbrD,KAAKsD,MAAMtD,KAAKuD,UAAYF,EAAM,IAAMD,GASiCnE,SAAS,EAAOuE,GAAG,IAAD,OAAMpD,EAAN,YAAWC,IAV1F,IAAC+C,EAAeC,QAenC,OAHmBJ,EAPP3C,OAAM,SAAAH,GAAG,OAAIA,EAAIG,OAAM,SAACpC,EAAM6E,EAAOU,GAAd,OAAsBvF,EAAKgB,QAAUuE,EAAI,GAAGvE,aAQ3E8D,IAEGC,GASLS,EAAyB,CAC3B9F,KAAMoF,IACN/E,MAAO,EACPyD,OAAQ,IAGNoB,EAAQa,YAAY,CACtBC,KAAM,OACNF,eACAG,SAAU,CACNjE,WAAY,SAACkE,EAAOC,GAAY,IACpB9F,EAAU8F,EAAOC,QAAjB/F,MACFyD,EAAmB,IAAVzD,EAAc6F,EAAMpC,OAASoC,EAAMpC,OAAOuC,OAAOhG,GAChE,OAAO,2BAAK6F,GAAZ,IAAmBlG,KAAMoF,IAAmBtB,SAAQzD,MAAO,KAE/DyB,UAAW,SAACoE,EAAOC,GAAY,IAAD,EACJA,EAAOC,QAAQ9F,KAA7BgB,EADkB,EAClBA,MAAOsE,EADW,EACXA,GACTvF,EAAkB,IAAViB,EAAc,EAAIc,KAAKkE,IAAIJ,EAAM7F,MAAQiB,EDlC3C,ICmCNtB,EAAOkG,EAAMlG,KAAKsC,KAAI,SAAAC,GACxB,OAAOA,EAAID,KAAI,SAAAhC,GACX,OAAIA,EAAKsF,KAAOA,EACL,2BAAKtF,GAAZ,IAAkBe,SAAS,IAEnBf,QAGpB,OAAO,2BAAK4F,GAAZ,IAAmBlG,OAAMK,cAM/BkG,EAAc,CAChBC,QAAStB,EAAMsB,SAGNC,EAAWC,YAAeH,G,EAEErB,EAAMyB,QAAhC3E,E,EAAAA,WAAYF,E,EAAAA,UAEd4B,EAAa,SAACwC,GAAD,OAAqBA,EAAMlG,MAExC0B,EAAc,SAACwE,GAAD,OAAqBA,EAAM7F,OAEzC0D,EAAe,SAACmC,GAAD,OAAqBA,EAAMpC,Q,MClEvD8C,IAASC,OACP,cAAC,IAAD,CAAUC,MAAOL,EAAjB,SACE,cAAC,IAAMM,WAAP,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.b6dc7a5e.chunk.js","sourcesContent":["import { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\"\r\nimport { nbCell } from \"./BoardGame\"\r\n\r\nexport const useStyles = makeStyles((theme: Theme) => {\r\n\r\n    const cellSize = \"80px\"\r\n    const gridGap = 10\r\n\r\n    const baseCellStyles = {\r\n        height: cellSize,\r\n        width: cellSize,\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\"\r\n    }\r\n\r\n    return createStyles({\r\n        root: {\r\n            maxWidth: 1200,\r\n            \"&>*\": {\r\n                margin: 10\r\n            }\r\n        },\r\n        grid: {\r\n            display: \"grid\",\r\n            gridTemplateColumns: `repeat(${nbCell}, ${cellSize})`,\r\n            gridTemplateRows: `repeat(${nbCell}, ${cellSize})`,\r\n            gridGap\r\n        },\r\n        score: {\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\"\r\n        },\r\n        cell: {\r\n            ...baseCellStyles,\r\n            background: \"green\",\r\n            color: \"white\",\r\n            cursor: \"pointer\"\r\n        },\r\n        solverCell: {\r\n            ...baseCellStyles,\r\n            background: \"pink\",\r\n            color: \"black\"\r\n        },\r\n        bestSolution: {\r\n            background: \"orange\"\r\n        },\r\n        container: {\r\n            display: \"flex\",\r\n            \"&>*\": {\r\n                margin: `0 ${gridGap / 2}px`\r\n            }\r\n        },\r\n        vScores: {\r\n            \"&>*:not(:first-child)\": {\r\n                margin: `${gridGap}px 0`\r\n            }\r\n        },\r\n        highScores: {\r\n            marginLeft: 40\r\n        },\r\n        header: {\r\n            display: \"flex\",\r\n            \"&>*\": {\r\n                marginLeft: 20\r\n            }\r\n        }\r\n    })\r\n})","import React from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { cellClick, updateGrid, selectScore } from \"../redux/app\"\r\nimport { useStyles } from \"./index_styles\"\r\nimport clsx from \"clsx\"\r\n\r\nexport type CellProps = {\r\n    id: string\r\n    value: number\r\n    visible: boolean\r\n}\r\n\r\nconst Cell: React.FunctionComponent<{ cell: CellProps, className?: string }> = (props) => {\r\n\r\n    const classes = useStyles()\r\n\r\n    const { cell, className } = props\r\n    const { visible, value } = cell\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const score = useSelector(selectScore)\r\n\r\n    const handleClick = (cell: CellProps) => {\r\n        dispatch(cellClick({ cell }))\r\n        if (value === 0) {\r\n            alert(\"You loose !! ðŸ˜ž\")\r\n            dispatch(updateGrid({ score }))\r\n        }\r\n    }\r\n\r\n    const valueToDisplay = value === 0 ? \"ðŸ’£\" : value\r\n\r\n    return (\r\n        <div className={clsx(classes.cell, className)} onClick={() => !visible && handleClick(cell)}>\r\n            {visible && valueToDisplay}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cell","import React from \"react\"\r\nimport Cell, { CellProps } from \"./Cell\"\r\nimport { useStyles } from \"./index_styles\"\r\n\r\n\r\nconst Grid: React.FunctionComponent<{ grid: CellProps[][], helpMode: boolean }> = (props) => {\r\n\r\n    const classes = useStyles()\r\n\r\n    const { grid, helpMode } = props\r\n\r\n    let bestSolution = Math.max(...grid.map(row => Math.max(...row.map(cell => cell.value))))\r\n\r\n    const getBestSOlution = () => {\r\n        const allBestSolutionsClicked = grid.every(row => row.filter(cell => cell.value === bestSolution).every(cell => cell.visible))\r\n        if (allBestSolutionsClicked) {\r\n            bestSolution = bestSolution - 1\r\n        }\r\n        return bestSolution\r\n    }\r\n\r\n    return (\r\n        <div className={classes.grid}>\r\n            {grid.map((row, r) =>\r\n                row.map((cell, c) =>\r\n                    <Cell cell={cell} className={(helpMode && cell.value === getBestSOlution()) ? classes.bestSolution : undefined} />\r\n                )\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Grid","import React from \"react\"\r\nimport { useStyles } from \"./index_styles\"\r\n\r\nconst Score: React.FunctionComponent<{ score: number }> = (props) => {\r\n\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <div className={classes.score}>\r\n            {`Score: ${props.score}`}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Score","import React from \"react\"\r\nimport { useStyles } from \"./index_styles\"\r\n\r\n\r\nconst SolverCell: React.FunctionComponent<{}> = (props) => {\r\n\r\n    const classes = useStyles()\r\n    const { children } = props\r\n\r\n    return (\r\n        <div className={classes.solverCell} >\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SolverCell","import React from \"react\"\r\nimport Grid from \"./Grid\"\r\nimport Score from \"./Score\"\r\nimport SolverCell from \"./SolverCell\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { selectGrid, updateGrid, selectScore, selectScores } from \"../redux/app\"\r\nimport { Button, Table, TableBody, TableHead, TableRow, TableCell, Switch, FormGroup, FormControlLabel } from \"@material-ui/core\"\r\nimport { useStyles } from \"./index_styles\"\r\nimport { CellProps } from \"./Cell\"\r\n\r\nexport const nbCell = 6\r\nexport const maxValue = 3\r\nexport const maxScore = 45\r\n\r\nconst transpose = (matrix: CellProps[][]) => {\r\n    return matrix[0].map((col, i) => matrix.map(row => row[i]));\r\n}\r\n\r\nconst getScoreFromRow = (row: CellProps[]) => {\r\n    const sum = row.reduce((acc, cell) => acc + cell.value, 0)\r\n    const nbZeros = row.reduce((acc, cell) => cell.value === 0 ? acc + 1 : acc, 0)\r\n    return `${sum} / ${nbZeros}ðŸ’£`\r\n}\r\n\r\nconst BoardGame: React.FunctionComponent<{}> = (props) => {\r\n\r\n    const classes = useStyles()\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [helpMode, setHelpMode] = React.useState(false)\r\n\r\n    const handleChange = () => {\r\n        setHelpMode(prevState => !prevState)\r\n    }\r\n\r\n    const grid = useSelector(selectGrid)\r\n\r\n    const handleNewGame = () => {\r\n        dispatch(updateGrid({ score }))\r\n    }\r\n\r\n    const hScores = grid.map(row => getScoreFromRow(row))\r\n\r\n    const vScores = transpose(grid).map(row => getScoreFromRow(row))\r\n\r\n    const score = useSelector(selectScore)\r\n\r\n    const scores = useSelector(selectScores)\r\n\r\n    if (score >= maxScore) {\r\n        alert(\"You win !! ðŸ¥³\")\r\n        dispatch(updateGrid({ score }))\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <div className={classes.header}>\r\n                <Button color=\"primary\" variant=\"contained\" onClick={handleNewGame}>{\"New game\"}</Button>\r\n                <FormGroup>\r\n                    <FormControlLabel\r\n                        control={<Switch checked={helpMode} onChange={handleChange} color=\"primary\" />}\r\n                        label=\"Help mode\"\r\n                    />\r\n                </FormGroup>\r\n            </div>\r\n            <div>\r\n                <div className={classes.container}>\r\n                    <Grid grid={grid} helpMode={helpMode} />\r\n                    <div className={classes.vScores}>{hScores.map(cell => <SolverCell>{cell}</SolverCell>)}</div>\r\n                    <div className={classes.highScores}>\r\n                        <h1>{\"High scores (5)\"}</h1>\r\n                        <Table>\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>{\"Rank\"}</TableCell>\r\n                                    <TableCell>{\"Score\"}</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {[...scores].sort((a, b) => b - a).slice(0, 5).map((score, index) => (\r\n                                    <TableRow>\r\n                                        <TableCell>{index + 1}</TableCell>\r\n                                        <TableCell>{score}</TableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </div>\r\n                </div>\r\n                <div className={classes.container}>{vScores.map(cell => <SolverCell>{cell}</SolverCell>)}</div>\r\n            </div>\r\n            <Score score={score} />\r\n            <div>{`You need ${maxScore} points`}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BoardGame","import { configureStore } from '@reduxjs/toolkit'\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport { nbCell, maxValue, maxScore } from \"../components/BoardGame\"\r\nimport { CellProps } from '../components/Cell'\r\n\r\nconst generateNumber = (start: number, end: number) => {\r\n    return Math.floor(Math.random() * (end + 1)) + start\r\n}\r\n\r\nconst isNotValidGrid = (grid: CellProps[][]) => {\r\n    return grid.every(row => row.every((cell, index, arr) => cell.value === arr[0].value))\r\n}\r\n\r\nconst generateNewGrid = () => {\r\n    const newGrid = [...new Array(nbCell)].map((e, r) =>\r\n        [...new Array(nbCell)].map((e, c) => ({ value: generateNumber(0, maxValue), visible: false, id: `R${r}C${c}` }))\r\n    )\r\n    if (isNotValidGrid(newGrid)) {\r\n        generateNewGrid()\r\n    }\r\n    return newGrid\r\n}\r\n\r\ntype AppState = {\r\n    grid: CellProps[][]\r\n    score: number\r\n    scores: number[]\r\n}\r\n\r\nconst initialState: AppState = {\r\n    grid: generateNewGrid(),\r\n    score: 0,\r\n    scores: []\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: \"grid\",\r\n    initialState,\r\n    reducers: {\r\n        updateGrid: (state, action) => {\r\n            const { score } = action.payload\r\n            const scores = score === 0 ? state.scores : state.scores.concat(score)\r\n            return { ...state, grid: generateNewGrid(), scores, score: 0 }\r\n        },\r\n        cellClick: (state, action) => {\r\n            const { value, id } = action.payload.cell\r\n            const score = value === 0 ? 0 : Math.min(state.score + value, maxScore)\r\n            const grid = state.grid.map(row => {\r\n                return row.map(cell => {\r\n                    if (cell.id === id) {\r\n                        return { ...cell, visible: true }\r\n                    }\r\n                    else return cell\r\n                })\r\n            })\r\n            return { ...state, grid, score }\r\n        }\r\n    }\r\n})\r\n\r\n\r\nconst rootReducer = {\r\n    reducer: slice.reducer\r\n}\r\n\r\nexport const appStore = configureStore(rootReducer)\r\n\r\nexport const { updateGrid, cellClick } = slice.actions\r\n\r\nexport const selectGrid = (state: AppState) => state.grid\r\n\r\nexport const selectScore = (state: AppState) => state.score\r\n\r\nexport const selectScores = (state: AppState) => state.scores","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport { appStore } from \"./redux/app\";\nimport './index.css';\nimport BoardGame from './components/BoardGame';\n\nReactDOM.render(\n  <Provider store={appStore}>\n    <React.StrictMode>\n      <BoardGame />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}